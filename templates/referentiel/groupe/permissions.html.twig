{% extends 'inside.html.twig' %}

{% block title %}Gérer les permissions - {{ groupe.nom }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
<style>
    /* Responsive Category Grid */
    .category-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    /* Scrollable Permission List */
    .permission-list {
        max-height: 500px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: #888 #f1f1f1;
    }

    /* Scrollbar Styling */
    .permission-list::-webkit-scrollbar {
        width: 8px;
    }

    .permission-list::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .permission-list::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    /* Permission Item Hover Effect */
    .permission-item {
        transition: background-color 0.3s ease;
    }

    .permission-item:hover {
        background-color: #f8f9fa;
    }

    /* Hidden Class for Filtering */
    .hidden {
        display: none !important;
    }

    /* Checkbox Styling */
    .permission-item input[type="checkbox"] {
        appearance: none;
        width: 18px;
        height: 18px;
        border: 2px solid #6b7280;
        border-radius: 4px;
        outline: none;
        cursor: pointer;
        position: relative;
    }

    .permission-item input[type="checkbox"]:checked {
        background-color: #4f46e5;
        border-color: #4f46e5;
    }

    .permission-item input[type="checkbox"]:checked::after {
        content: '✓';
        color: white;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    /* Responsive Adjustments */
    @media (max-width: 768px) {
        .category-grid {
            grid-template-columns: 1fr;
        }
    }
</style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="module">
        import $ from "jquery";
     $(document).ready(function() {
        const $searchInput = $('#permission-search');
        const $categoryContainers = $('.category-container');
        const $permissionItems = $('.permission-item');
        const $selectAllCheckboxes = $('.select-all-category');

        function filterPermissions() {
            const searchTerm = $searchInput.val().toLowerCase();

            $categoryContainers.each(function() {
                const $container = $(this);
                const $permissions = $container.find('.permission-item');
                let hasVisiblePermissions = false;

                $permissions.each(function() {
                    const $item = $(this);
                    const text = $item.text().toLowerCase();
                    const isVisible = text.includes(searchTerm);
                    $item.toggleClass('hidden', !isVisible);
                    if (isVisible) hasVisiblePermissions = true;
                });

                $container.toggleClass('hidden', !hasVisiblePermissions);
            });

            updateSelectAllCheckboxes();
        }

        function updateSelectAllCheckboxes() {
            $selectAllCheckboxes.each(function() {
                const $checkbox = $(this);
                const $category = $checkbox.closest('.category-container');
                const $visiblePermissions = $category.find('.permission-item:not(.hidden) input[type="checkbox"]');
                const $checkedPermissions = $category.find('.permission-item:not(.hidden) input[type="checkbox"]:checked');
                
                $checkbox.prop('checked', $visiblePermissions.length > 0 && $visiblePermissions.length === $checkedPermissions.length);
                $checkbox.prop('indeterminate', $checkedPermissions.length > 0 && $checkedPermissions.length < $visiblePermissions.length);
            });
        }

        function toggleCategory($checkbox) {
            const $category = $checkbox.closest('.category-container');
            const $permissions = $category.find('.permission-item:not(.hidden) input[type="checkbox"]');
            $permissions.prop('checked', $checkbox.prop('checked'));
        }

        $searchInput.on('input', filterPermissions);

        $selectAllCheckboxes.on('change', function() {
            toggleCategory($(this));
        });

        $permissionItems.find('input[type="checkbox"]').on('change', updateSelectAllCheckboxes);

        updateSelectAllCheckboxes();
    });
    </script>
{% endblock %}

{% block main %}
    <div class="container mx-auto px-4 py-8">
        <h2 class="text-3xl font-bold text-gray-800 mb-6">Gérer les permissions du groupe : {{ groupe.nom }}</h2>

        {{ form_start(form, {'attr': {'class': 'space-y-6', 'novalidate': 'novalidate'}}) }}

        <div class="space-y-6">
            <div class="category-grid row g-0 d-flex justify-content-center ">
                {% for categoryName, choiceGroup in form.permissions.vars.choices %}
                    <div class="category-container bg-white shadow-md rounded-lg p-3 m-2 col-5 card ">
                        <div class="flex items-center justify-between mb-3 card-header">
                            <h3 class="text-lg font-semibold text-gray-800">{{ categoryName }}</h3>
                        </div>
                        <div class="permission-list space-y-2 card ">
                            {% for choice in choiceGroup.choices %}
                                <div class="permission-item flex items-center space-x-2 p-2 border rounded-md hover:bg-gray-50">
                                    {{ form_widget(form.permissions[choice.value], {
                                        'attr': {
                                            'class': 'rounded border-gray-300 text-indigo-600 focus:ring-indigo-500',
                                            'id': 'permission_' ~ choice.value
                                        }
                                    }) }}
                                    {{ form_label(form.permissions[choice.value], null, {
                                        'label_attr': {
                                            'class': 'text-sm text-gray-700',
                                            'for': 'permission_' ~ choice.value
                                        }
                                    }) }}
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                {% endfor %}
            </div>
            {{ form_errors(form.permissions, {'attr': {'class': 'text-red-600 text-sm mt-1'}}) }}
        </div>

        <div class="d-flex justify-content-between">
            <a href="{{ path('app_groupe_index') }}" class="btn btn-secondary w-50 mt-3">
                Retour à la liste
            </a>
            <button type="submit" class="btn btn-primary w-50mt-3">
                Confirmer
            </button>
        </div>
        {{ form_end(form) }}
    </div>
{% endblock %}

